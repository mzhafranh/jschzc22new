<!DOCTYPE html>
<html>

<head>
    <title>BREAD (Browse, Read, Edit, Add, Delete)</title>
    <link href="/stylesheets/bootstrap.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* Dark overlay for background when modal is open */
        #overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            /* Semi-transparent black */
            z-index: 1050;
            display: none;
        }

        /* Modal should be above the dark overlay */
        #formModal {
            z-index: 1060;
        }
    </style>
</head>

<body>
    <div class="container mt-3">
        <div class="card">
            <div class="card-header">
                <h2 class="text-center">MongoDB Breads(Browse, Read, Edit, Add, Delete, Sort)</h2>
            </div>
            <form action="" id="form-data"></form>
            <div class="card-body">
                <div class="row g-2">
                    <div class="col-auto">
                        <div class="input-group">
                            <div class="input-group-text">Show</div>
                            <form id="limit-form">
                                <select class="form-select" name="limit-input" id="limit-input">
                                    <option value="5" selected>5</option>
                                    <option value="10">10</option>
                                    <option value="0">all</option>
                                </select>
                            </form>
                            <div class="input-group-text">entries</div>
                        </div>
                    </div>
                    <div class="col">
                        <input type="text" class="form-control" id="search-input" placeholder="search">
                    </div>
                    <div class="col-auto">
                        <button class="btn btn-outline-secondary" id="search-button"><i
                                class="fa-solid fa-magnifying-glass"></i></button>
                        <button class="btn btn-outline-warning" id="reset-button"><i
                                class="fa-solid fa-arrows-rotate"></i></button>
                    </div>
                </div>
                <table class="table table-striped table-hover table-borderless" id="table-users">
                    <thead>

                    </thead>
                    <tbody>

                    </tbody>
                </table>
            </div>
            <div class="card-footer d-flex justify-content-between align-items-center">


                <button class="btn btn-primary btn-sm" id="add-button">
                    <i class="fa-solid fa-plus"></i>
                </button>

                <div class="d-flex align-items-center">
                    <span class="me-2" id="entries-text">Showing X to Y of Z entries</span>
                    <nav>
                        <ul class="pagination mb-0">

                        </ul>
                    </nav>
                </div>

            </div>
        </div>
    </div>
    <br>

    <!-- Dark overlay -->
    <div id="overlay"></div>

    <!-- Modal Structure -->
    <div id="formUserModal" class="modal" tabindex="-1" style="display: none;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">User Form</h5>
                    <button type="button" class="btn-close" id="closeUserModal"></button>
                </div>
                <div class="modal-body">
                    <form id="userForm">
                        <div class="row mb-3">
                            <label for="name" class="col-form-label col-md-2">Name</label>
                            <div class="col-md-10">
                                <input type="text" class="form-control" id="name" name="name" required>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="phone" class="col-form-label col-md-2">Phone</label>
                            <div class="col-md-10">
                                <input type="text" class="form-control" id="phone" name="phone" required>
                            </div>
                        </div>
                    </form>
                    <div id="deleteConfirmation" style="display:none;">
                        <p class="mb-0">Are you sure?</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" id="closeOptionUserModal">Close</button>
                    <button class="btn btn-primary" id="submitUser">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.getElementById('limit-form').addEventListener('change', function () {
            const selectElement = document.getElementById('limit-input');
            readData(`page=1&limit=${selectElement.value}&query=""&sortBy="_id"&sortMode="desc"`)
        });
    </script>

    <script>
        // JavaScript to handle modal functionality
        const closeUserModal = document.getElementById('closeUserModal');
        const closeOptionUserModal = document.getElementById('closeOptionUserModal');
        const formUserModal = document.getElementById('formUserModal');
        const userForm = document.getElementById('userForm');
        const submitUser = document.getElementById('submitUser');
        const deleteConfirmation = document.getElementById('deleteConfirmation');
        const overlay = document.getElementById('overlay');

        document.getElementById('add-button').addEventListener('click', function () {
            formUserModal.style.display = 'block'
            userForm.style.display = 'block'
            deleteConfirmation.style.display = 'none'
            overlay.style.display = 'block'
            userForm.reset()
            closeOptionUserModal.innerText = "Close"
            submitUser.innerText = "Save changes"
            document.getElementById('name').value = ''
            document.getElementById('phone').value = ''
            submitUser.onclick = addUser;
        });

        function openEditModal(id, name, phone) {
            formUserModal.style.display = 'block'
            userForm.style.display = 'block'
            deleteConfirmation.style.display = 'none'
            overlay.style.display = 'block'
            closeOptionUserModal.innerText = "Close"
            submitUser.innerText = "Save changes"
            document.getElementById('name').value = name;
            document.getElementById('phone').value = phone;
            submitUser.onclick = function(){ editUser(id)};
        }

        function openDeleteModal(id){
            formUserModal.style.display = 'block'
            userForm.style.display = 'none'
            deleteConfirmation.style.display = 'block'
            closeOptionUserModal.innerText = "No"
            submitUser.innerText = "Yes"
            submitUser.onclick = function() { deleteUser(id); }
        }

        function addUser() {
            const formData = new FormData(userForm);
            fetch('http://localhost:3000/users', {
                method: 'POST',
                body: formData,
            }).then((response) => {
                closeModal(); 
                readData(`page=1&limit=5&query=""&sortBy="_id"&sortMode="desc"`)
            })
        }

        function editUser(id) {
            const formData = new FormData(userForm);
            fetch(`http://localhost:3000/users/${id}`, {
                method: 'PUT',
                body: formData,
            }).then((response) => {
                closeModal(); 
                readData(`page=1&limit=5&query=""&sortBy="_id"&sortMode="desc"`)
            })
        }

        function deleteUser(id){
            fetch(`http://localhost:3000/users/${id}`, {
                method: 'DELETE',
            }).then((response) => {
                closeModal(); 
                readData(`page=1&limit=5&query=""&sortBy="_id"&sortMode="desc"`)
            })
        }

        function closeModal() {
            formUserModal.style.display = 'none';
            overlay.style.display = 'none';
        }

        // Hide modal and overlay when close button is clicked
        closeUserModal.onclick = function() {
            closeModal()
        }

        closeOptionUserModal.onclick = function() {
            closeModal()
        }
    </script>

    <script>
        const readData = (link) => {
            fetch(`http://localhost:3000/users?${link}`).then((response) => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
                .then((response) => {

                    let linkParams = new URLSearchParams(link)

                    let htmlThead = '';
                    htmlThead += `<tr>`

                    htmlThead += `<th scope="col">No.</th>`

                    if (linkParams.get('sortBy') == '"name"' && linkParams.get("sortMode") == '"asc"') {
                        linkParams.set("sortMode", '"desc"')
                        htmlThead += `<th scope="col"><button class="btn" style="font-weight: bold; padding: 0 0 0 0;" onclick="readData('${linkParams.toString()}')"><i class="fa-solid fa-sort-down" style="margin-left:10px;"></i> Name</button></th>`
                    }
                    else if (linkParams.get('sortBy') == '"name"' && linkParams.get("sortMode") == '"desc"') {
                        linkParams.set("sortMode", '"asc"')
                        htmlThead += `<th scope="col"><button class="btn" style="font-weight: bold; padding: 0 0 0 0;" onclick="readData('${linkParams.toString()}')"><i class="fa-solid fa-sort-up" style="margin-left:10px;"></i> Name</button></th>`
                    }
                    else {
                        let param = new URLSearchParams(link)
                        param.set('sortBy', '"name"')
                        param.set('sortMode', '"asc"')
                        let modifiedLink = param.toString();
                        htmlThead += `<th scope="col"><button class="btn" style="font-weight: bold; padding: 0 0 0 0;" onclick="readData('${modifiedLink}')"><i class="fa-solid fa-sort" style="margin-left:10px;"></i> Name</button></th>`
                    }

                    if (linkParams.get('sortBy') == '"phone"' && linkParams.get("sortMode") == '"asc"') {
                        linkParams.set("sortMode", '"desc"')
                        htmlThead += `<th scope="col"><button class="btn" style="font-weight: bold; padding: 0 0 0 0;" onclick="readData('${linkParams.toString()}')"><i class="fa-solid fa-sort-down" style="margin-left:10px;"></i> Phone</button></th>`
                    }
                    else if (linkParams.get('sortBy') == '"phone"' && linkParams.get("sortMode") == '"desc"') {
                        linkParams.set("sortMode", '"asc"')
                        htmlThead += `<th scope="col"><button class="btn" style="font-weight: bold; padding: 0 0 0 0;" onclick="readData('${linkParams.toString()}')"><i class="fa-solid fa-sort-up" style="margin-left:10px;"></i> Phone</button></th>`
                    }
                    else {
                        let param = new URLSearchParams(link)
                        param.set('sortBy', '"phone"')
                        param.set('sortMode', '"asc"')
                        let modifiedLink = param.toString();
                        htmlThead += `<th scope="col"><button class="btn" style="font-weight: bold; padding: 0 0 0 0;" onclick="readData('${modifiedLink}')"><i class="fa-solid fa-sort" style="margin-left:10px;"></i> Phone</button></th>`
                    }

                    htmlThead += `<th>Action</th>`
                    htmlThead += `</tr>`
                    document.querySelector('table thead').innerHTML = htmlThead;

                    let startingIndex = (linkParams.get("page") - 1) * linkParams.get("limit")

                    let htmlTbody = '';
                    response.data.forEach((item, index) => {

                        htmlTbody += `
                <tr>
                    <td>${startingIndex + index + 1}</td>
                    <td>${item.name}</td>
                    <td>${item.phone}</td>
                    <td>
                    <button type="button" class="btn btn-success" style="color: #ffffff;" onClick="openEditModal('${item._id}', '${item.name}', '${item.phone}')"><i class="fa-solid fa-pencil"></i></button>
                    <button type="button" class="btn btn-danger" onClick="openDeleteModal('${item._id}')"><i class="fa-solid fa-trash-can"></i></button>
                    <a href="/users/${item._id}/todos" class="btn btn-warning"><i class="fa-solid fa-right-from-bracket"></i></a>
                    </td>
                </tr>
                `
                    })
                    document.querySelector('table tbody').innerHTML = htmlTbody

                    let pageParam = new URLSearchParams(link)
                    let prevPageLink = ''
                    let nextPageLink = ''
                    let pageLink = ''

                    if (pageParam.get('page') == 1) {
                        prevPageLink = pageParam.toString()
                        pageParam.set('page', parseInt(pageParam.get('page')) + 1)
                        nextPageLink = pageParam.toString()
                    } else if (pageParam.get('page') == pageParam.get('pages')) {
                        nextPageLink = pageParam.toString()
                        pageParam.set('page', pageParam.get('page') - 1)
                        prevPageLink = pageParam.toString()
                    } else {
                        pageParam.set('page', pageParam.get('page') - 1)
                        prevPageLink = pageParam.toString()

                        pageParam.set('page', parseInt(pageParam.get('page')) + 2)
                        nextPageLink = pageParam.toString()
                    }

                    let showEntryText = ''
                    if (response.total == 0) {
                        showEntryText += `<span class="me-2" id="entries-text">Showing 0 to 0 of 0 entries</span>`
                    } else if (response.page * response.limit > response.total || response.limit == 0) {
                        showEntryText += `<span class="me-2" id="entries-text">Showing ${startingIndex + 1} to ${response.total} of ${response.total} entries</span>`
                    } else {
                        showEntryText += `<span class="me-2" id="entries-text">Showing ${startingIndex + 1} to ${response.page * response.limit} of ${response.total} entries</span>`
                    }
                    document.querySelector('span').innerHTML = showEntryText

                    let paging = '';

                    paging += `<button type="button" class="page-link" onClick='readData("${prevPageLink}")'><span aria-hidden="true">&laquo;</span></button>`

                    for (let i = 1; i <= response.pages; i++) {
                        pageParam.set('page', i)
                        pageLink = pageParam.toString()

                        if (link.includes(`page=${i}`)) {
                            paging += `<li class="page-item"><button type="button" class="page-link active" onClick='readData("${pageLink}")'>${i}</button></li>`
                        }
                        else {
                            paging += `<li class="page-item"><button type="button" class="page-link" onClick='readData("${pageLink}")'>${i}</button></li>`
                        }
                    }
                    paging += `<button type="button" class="page-link" onClick='readData("${nextPageLink}")'><span aria-hidden="true">&raquo;</span></button>`

                    document.querySelector('ul').innerHTML = paging
                })
                .catch((err) => {
                    console.error(err);
                });
        }
        readData(`page=1&limit=5&query=""&sortBy="_id"&sortMode="desc"`)
    </script>

</body>

</html>